/*
 * Generated by Bluespec Compiler (build 785e4e4)
 * 
 * On Tue Nov  3 17:18:25 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkFA.h"


/* Constructor */
MOD_mkFA::MOD_mkFA(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFA::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkFA::METH_fa_out(tUInt8 ARG_fa_out_a, tUInt8 ARG_fa_out_b, tUInt8 ARG_fa_out_c_in)
{
  tUInt8 DEF_y__h34;
  tUInt8 DEF_x__h33;
  tUInt8 DEF_c_out__h21;
  tUInt8 DEF_x__h49;
  tUInt8 DEF_s__h20;
  tUInt8 PORT_fa_out;
  DEF_x__h49 = ARG_fa_out_a ^ ARG_fa_out_b;
  DEF_s__h20 = DEF_x__h49 ^ ARG_fa_out_c_in;
  DEF_x__h33 = ARG_fa_out_a & ARG_fa_out_b;
  DEF_y__h34 = ARG_fa_out_c_in & DEF_x__h49;
  DEF_c_out__h21 = DEF_x__h33 | DEF_y__h34;
  PORT_fa_out = (tUInt8)3u & ((DEF_c_out__h21 << 1u) | DEF_s__h20);
  return PORT_fa_out;
}

tUInt8 MOD_mkFA::METH_RDY_fa_out()
{
  tUInt8 DEF_CAN_FIRE_fa_out;
  tUInt8 PORT_RDY_fa_out;
  DEF_CAN_FIRE_fa_out = (tUInt8)1u;
  PORT_RDY_fa_out = DEF_CAN_FIRE_fa_out;
  return PORT_RDY_fa_out;
}


/* Reset routines */

void MOD_mkFA::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFA::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFA::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkFA::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFA::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFA &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkFA::vcd_defs(tVCDDumpType dt, MOD_mkFA &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
